syntax = "proto3";

/*
    게임 데이터 명세
*/
message UserData {
    int64 id = 1;
    string nickname = 2;
    CharacterData character = 3;
}

message CharacterData {
    CharacterType characterType = 1;
    RoleType roleType = 2;
    int32 hp = 3;
    int32 weapon = 4;
    CharacterStateInfoData stateInfo = 5;
    repeated int32 equips = 6;
    repeated int32 debuffs = 7;
    repeated CardData handCards = 8;
    int32 bbangCount = 9;
    int32 handCardsCount = 10;
}

message RoomData {
    int32 id = 1;
    int64 ownerId = 2;
    string name = 3;
    int32 maxUserNum = 4;
    RoomStateType state = 5; // WAIT 0, PREPARE 1, INAGAME 2
    repeated UserData users = 6; // 인덱스 기반으로 턴 진행
}
message CharacterPositionData {
    int64 id = 1;
    double x = 2;
    double y = 3;
}
message GameStateData {
    PhaseType phaseType = 1; // DAY 1, EVENING 2, END 3 (하루 종료시 카드 버리는 턴)
    int64 nextPhaseAt = 2; // 다음 페이즈 시작 시점(밀리초 타임스탬프)
}
/* 
    패킷 명세
*/
message C2SRegisterRequest {
    string email = 1;
    string nickname = 2;
    string password = 3;
}

message S2CRegisterResponse {
    bool success = 1;
    string message = 2;
    GlobalFailCode failCode = 3;
}

message C2SLoginRequest {
    string email = 1;
    string password = 2;
}

message S2CLoginResponse {
    bool success = 1;
    string message = 2;
    string token = 3;
    UserData myInfo = 4;
    GlobalFailCode failCode = 5;

}

message C2SCreateRoomRequest {
    string name = 1;
    int32 maxUserNum = 2;
}

message S2CCreateRoomResponse {
    bool success = 1;
    RoomData room = 2;
    GlobalFailCode failCode = 3;
}

message C2SGetRoomListRequest {
    
}

message S2CGetRoomListResponse{
    repeated RoomData rooms = 1;
}

message C2SJoinRoomRequest {
    int32 roomId = 1;
}

message S2CJoinRoomResponse {
    bool success = 1;
    RoomData room = 2;
    GlobalFailCode failCode = 3;
}

message S2CJoinRoomNotification {
    UserData joinUser = 1;
}

message C2SJoinRandomRoomRequest {

}

message S2CJoinRandomRoomResponse {
    bool success = 1;
    RoomData room = 2;
    GlobalFailCode failCode = 3;
} 

message C2SLeaveRoomRequest {

}

message S2CLeaveRoomResponse {
    bool success = 1;
    GlobalFailCode failCode = 2;
}

message S2CLeaveRoomNotification {
    int64 userId = 1;
}

message C2SGamePrepareRequest {

}

message S2CGamePrepareResponse {
    bool success = 1;
    GlobalFailCode failCode = 2;
} 

message S2CGamePrepareNotification {
    RoomData room = 1;
}

message C2SGameStartRequest {

}

message S2CGameStartResponse {
    bool success = 1;
    GlobalFailCode failCode = 2;
}

message S2CGameStartNotification {
    GameStateData gameState = 1;
    repeated UserData users = 2;
    repeated CharacterPositionData characterPositions = 3;
    int64 tagger = 4;
}

message C2SPositionUpdateRequest {
    double x = 1;
    double y = 2;
}

message S2CPositionUpdateNotification {
    repeated CharacterPositionData characterPositions = 1;
}

message C2SUseCardRequest {
    CardType cardType = 1;
    int64 targetUserId = 2; // 타겟 없으면 0
}

message S2CUseCardResponse { // 성공 여부만 반환하고 대상 유저 효과는 S2CUserUpdateNotification로 통지
    bool success = 1;
    GlobalFailCode failCode = 2;
}

message S2CUseCardNotification {
    CardType cardType = 1;
    int64 userId = 2;
    int64 targetUserId = 3; // 타겟 없으면 0
}

message S2CCardEffectNotification {
    CardType cardType = 1;
    int64 userId = 2;
    bool success = 3;
}

message S2CUserUpdateNotification {
    repeated UserData user = 1;
}

message S2CPhaseUpdateNotification {
    PhaseType phaseType = 1; // DAY 1, EVENING 2, END 3
    int64 nextPhaseAt = 2; // 다음 페이즈 시작 시점(밀리초 타임스탬프)
    repeated CharacterPositionData characterPositions = 3; // 변경된 캐릭터 위치
    int64 tagger = 4;
}


message C2SReactionRequest {
    ReactionType reactionType = 1; // NOT_USE_CARD = 1
}

message S2CReactionResponse {
    bool success = 1;
    GlobalFailCode failCode = 2;
}

message S2CGameWinNotification {
    int32 ranking = 1;
    string winner = 2;
}

// message S2CGameEndNotification {
//     string loser = 1;
//     string winner = 2;
// }

message S2CGameEndNotification {
    repeated int64 winners = 1;
    WinType winType = 2;
}


message CardData {
    CardType type = 1;
    int32 count = 2;
}

message CharacterStateInfoData {
    CharacterStateType state = 1;
    CharacterStateType nextState = 2;
    int64 nextStateAt = 3; // state가 nextState로 풀리는 밀리초 타임스탬프. state가 NONE이면 0
    int64 stateTargetUserId = 4; // state에 target이 있을 경우
}


message GamePacket {
    oneof payload {

//  로그인 , 회원가입
C2SRegisterRequest registerRequest= 1;
     
S2CRegisterResponse registerResponse=2;

C2SLoginRequest loginRequest= 3;

S2CLoginResponse loginResponse=4;


//방 생성 , 리스트 , 참여 , 탈주 , 랜덤 매칭
C2SCreateRoomRequest createRoomRequest = 5;

S2CCreateRoomResponse createRoomResponse = 6;

C2SGetRoomListRequest getRoomListRequest=7;

S2CGetRoomListResponse getRoomListResponse =8;

C2SJoinRoomRequest joinRoomRequest =9; 

S2CJoinRoomResponse joinRoomResponse =10;

C2SJoinRandomRoomRequest joinRandomRoomRequest =11;

S2CJoinRandomRoomResponse joinRandomRoomResponse =12;

S2CJoinRoomNotification joinRoomNotification =13;

C2SLeaveRoomRequest leaveRoomRequest = 14;

S2CLeaveRoomResponse leaveRoomResponse = 15;

S2CLeaveRoomNotification leaveRoomNotification = 16;


//게임 준비 , 시작
C2SGamePrepareRequest gamePrepareRequest = 17;

S2CGamePrepareResponse gamePrepareResponse = 18;

S2CGamePrepareNotification gamePrepareNotification = 19;

C2SGameStartRequest gameStartRequest = 20;

S2CGameStartResponse gameStartResponse = 21;

S2CGameStartNotification gameStartNotification = 22;


//위치 동기화
C2SPositionUpdateRequest positionUpdateRequest = 23;

S2CPositionUpdateNotification positionUpdateNotification = 24;


//카드 관련
C2SUseCardRequest useCardRequest = 25;

S2CUseCardResponse useCardResponse = 26; // 성공 여부만 반환하고 대상 유저 효과는 S2CUserUpdateNotification로 통지

S2CUseCardNotification useCardNotification = 27;

S2CCardEffectNotification cardEffectNotification = 29;

// 유저 상태 동기화
S2CUserUpdateNotification userUpdateNotification = 33;

S2CPhaseUpdateNotification phaseUpdateNotification = 34;

// 리액션
C2SReactionRequest reactionRequest = 35;

S2CReactionResponse reactionResponse = 36;


//게임 종료
S2CGameWinNotification gameWinNotification = 46;

S2CGameEndNotification gameEndNotification =39;


    }
}

enum CharacterType {
    NONE_CHARACTER = 0;
    RED = 1; // 빨강이
    SHARK = 3; // 상어군
    MALANG = 5; // 말랑이
    FROGGY = 7; // 개굴군
    PINK = 8; // 핑크군
    SWIM_GLASSES = 9; // 물안경군
    MASK = 10; // 가면군
    DINOSAUR = 12; // 공룡이
    PINK_SLIME = 13; // 핑크슬라임
}
enum GlobalFailCode {
    NONE_FAILCODE = 0;
    UNKNOWN_ERROR = 1;
    INVALID_REQUEST = 2;
    AUTHENTICATION_FAILED = 3;
    CREATE_ROOM_FAILED = 4;
    JOIN_ROOM_FAILED = 5;
    LEAVE_ROOM_FAILED = 6;
    REGISTER_FAILED = 7;
    ROOM_NOT_FOUND = 8;
    CHARACTER_NOT_FOUND = 9;
    CHARACTER_STATE_ERROR = 10;
    CHARACTER_NO_CARD = 11;
    INVALID_ROOM_STATE = 12;
    NOT_ROOM_OWNER = 13;
    ALREADY_USED_BBANG = 14;
    INVALID_PHASE = 15;
    CHARACTER_CONTAINED = 16;
}

enum CharacterStateType {
    NONE_CHARACTER_STATE = 0;
    BBANG_SHOOTER = 1; // 빵야 시전자
    BBANG_TARGET = 2; // 빵야 대상 (쉴드 사용가능 상태)
    DEATH_MATCH_STATE = 3; // 현피 중 자신의 턴이 아닐 때
    DEATH_MATCH_TURN_STATE = 4; // 현피 중 자신의 턴
    FLEA_MARKET_TURN = 5; // 플리마켓 자신의 턴
    FLEA_MARKET_WAIT = 6; // 플리마켓 턴 대기 상태
    GUERRILLA_SHOOTER = 7; // 게릴라 시전자
    GUERRILLA_TARGET = 8; // 게릴라 대상
    BIG_BBANG_SHOOTER = 9; // 난사 시전자
    BIG_BBANG_TARGET = 10; // 난사 대상
    ABSORBING = 11; // 흡수 중
    ABSORB_TARGET = 12; // 흡수 대상
    HALLUCINATING = 13; // 신기루 중
    HALLUCINATION_TARGET = 14; // 신기루 대상
    CONTAINED = 15; // 감금 중
}

enum CardType {
    NONE = 0;
    BBANG = 1; // 20장
    BIG_BBANG = 2; // 1장
    SHIELD = 3; // 10장
    VACCINE = 4; // 6장
    CALL_119 = 5; // 2장
    DEATH_MATCH = 6; // 4장
    GUERRILLA = 7; // 1장
    ABSORB = 8; // 4장
    HALLUCINATION = 9; // 4장
    FLEA_MARKET = 10; // 3장
    MATURED_SAVINGS = 11; // 2장
    WIN_LOTTERY = 12; // 1장
    SNIPER_GUN = 13; // 1장
    HAND_GUN = 14; // 2장
    DESERT_EAGLE = 15; // 3장
    AUTO_RIFLE = 16; // 2장
    LASER_POINTER = 17; // 1장
    RADAR = 18; // 1장
    AUTO_SHIELD = 19; // 2장
    STEALTH_SUIT = 20; // 2장
    CONTAINMENT_UNIT = 21; // 3장
    SATELLITE_TARGET = 22; // 1장
    BOMB = 23; // 1장
}
enum PhaseType {
    NONE_PHASE = 0;
    DAY = 1;
    EVENING = 2;
    END = 3;
}
enum RoleType {
    NONE_ROLE = 0;
    TARGET = 1;
    BODYGUARD = 2;
    HITMAN = 3;
    PSYCHOPATH = 4;
}

enum WinType {
    TARGET_AND_BODYGUARD_WIN = 0;
    HITMAN_WIN = 1;
    PSYCHOPATH_WIN = 2;
    }

enum RoomStateType {
    WAIT = 0;
    PREPARE = 1;
    INGAME = 2;
}

enum ReactionType {
    NONE_REACTION = 0;
    NOT_USE_CARD = 1;
}

